/*
 * @LastEditors: liu yang
 * @Description: ÂÖ•Âè£Êñá‰ª∂
 * @Date: 2021-09-28 14:51:48
 * @LastEditTime: 2022-06-21 14:03:30
 * @Author:
 */
console.log("üöÄ > file: main.js > line 14 > config", config)

import "./public-path";
import { createApp } from "vue";
import App from "./App.vue";
import router from "./router";
import store from "./store";
import config from "@/config";
console.log("üöÄ > file: main.js > line 14 > config", config)

// ÂàõÂª∫VueÊ†πÂÆû‰æã
const app = createApp(App);

log(
  `${config.appCode} ÊòØÂê¶‰Ωú‰∏∫ÂæÆÂ∫îÁî®Ë∞ÉÁî®`,
  window.__MICRO_APP_ENVIRONMENT__ ? "ÊòØ" : "Âê¶"
);

// Âä®ÊÄÅË∑ØÁî±Âä†ËΩΩ
import "@/router/permission.js";

// ‰∏çÊä•Ë≠¶Âëä
app.config.unwrapInjectedRef = true;

app.use(store).use(router).mount("#app");

// ‰∏éÂü∫Â∫ßËøõË°åÊï∞ÊçÆ‰∫§‰∫í
function handleMicroData(router) {
  // ÊòØÂê¶ÊòØÂæÆÂâçÁ´ØÁéØÂ¢É
  if (window.__MICRO_APP_ENVIRONMENT__) {
    // ‰∏ªÂä®Ëé∑ÂèñÂü∫Â∫ß‰∏ãÂèëÁöÑÊï∞ÊçÆ
    const microAppData = window.microApp.getData();
    console.log("wo getData", microAppData);
    window.parentRouter = microAppData.router;
    window.parentGetSys = microAppData.getSys;

    // ÁõëÂê¨Âü∫Â∫ß‰∏ãÂèëÁöÑÊï∞ÊçÆÂèòÂåñ
    window.microApp.addDataListener(({ event, data }) => {
      switch (event) {
        case "routerPush":
          console.log("CCÊî∂ÔºöÂü∫Â∫ß routerPush", data);
          // ÂΩìÂü∫Â∫ß‰∏ãÂèëpathÊó∂ËøõË°åË∑≥ËΩ¨
          // eslint-disable-next-line no-case-declarations
          const pathArr = window.location.pathname.match(/\/qishi-.+/);
          // eslint-disable-next-line no-case-declarations
          const curRouterPath = (
            pathArr ? pathArr[0].replace(/\/$/, "") : "/"
          ).replace(/^\/qishi-[^/]+/, "");
          console.log("ÂΩìÂâçË∑ØÁî±Ôºö", curRouterPath);
          if (data.path && data.path !== curRouterPath) {
            console.log("Ë∑ØÁî±Ë∑≥ËΩ¨", data.path, window.parentGetSys());
            if (window.parentGetSys().includes("qishi-wo")) {
              router.push(data.path);
            } else {
              window.parentRouter.push(`/qishi-wo${data.path}`);
            }
          }
          break;
        case "deleteCacheTabs":
          console.log("CCÊî∂ÔºöÂü∫Â∫ß deleteCacheTabs", data);
          store.dispatch("deleteCachesTabs", data);
          break;
        default:
          console.log("CCÊî∂ÔºöÂü∫Â∫ß‰∏ãÂèëÊï∞ÊçÆÊîπÂèò");
      }
    });

    // ÁõëÂê¨ÁºìÂ≠òÂ≠êÂ∫îÁî®ÈáçÊñ∞Ê∏≤Êüì
    window.addEventListener("appstate-change", async function (e) {
      if (e.detail.appState === "afterhidden") {
        // console.log('Â∑≤Âç∏ËΩΩ')
      } else if (e.detail.appState === "beforeshow") {
        // console.log('Âç≥Â∞ÜÈáçÊñ∞Ê∏≤Êüì')
      } else if (e.detail.appState === "aftershow") {
        console.log("CC Â∑≤ÁªèÈáçÊñ∞Ê∏≤Êüì", router.currentRoute.value);
        // ËøôÈáåËøô‰πàÂ§ÑÁêÜ ÊòØÂõ†‰∏∫Êúâ‰∏™ bug Âú®ÂæÆÂ∫îÁî®‰∏≠Â¶Ç
        // ÊâìÂºÄA Á≥ªÁªü  a È°µÈù¢  ÊâìÂºÄB Á≥ªÁªü  b È°µÈù¢  ÁÑ∂ÂêéËèúÂçï‰∏äÁõ¥Êé•ÁÇπÂáªËøõÂÖ•A Á≥ªÁªü  c È°µÈù¢  Ëøô‰∏™Êó∂ÂÄô‰∏ç‰ºöËß¶ÂèëË∑ØÁî±ÂèòÂåñ 
        const pathArr = window.location.pathname.match(/\/qishi-.+/);
        // eslint-disable-next-line no-case-declarations
        const curRouterPath = (
          pathArr ? pathArr[0].replace(/\/$/, "") : "/"
        ).replace(/^\/qishi-[^/]+/, "");
        const curRouter = router.currentRoute.value;
        if (curRouterPath === curRouter.fullPath) {
          if (curRouter.meta.keepAlive) {
            await store.dispatch("addCachesTabs", {
              id: curRouter.name,
              name: curRouter.meta.title,
              path: curRouter.path,
              fullPath: curRouter.fullPath,
              ssCode: curRouter.meta.ssCode,
            });
          }
          return;
        }
        // FIX: 2022Âπ¥6Êúà1Êó•
        // ‰øÆÂ§çbug
        // ÂÖ∂‰ªñÂ≠êÁ≥ªÁªüËøõÂÖ•Â∑≤ÁªèÊâìÂºÄËøáÂæóÊüê‰∏™Â≠êÁ≥ªÁªüÁöÑÈ°µÈù¢ÔºåÂ∞±‰ºö‰∏¢Â§±ËøûÊé•‰∏äÁöÑÂèÇÊï∞
        // eg: ‰∏ªÁ´ôÊâìÂºÄCC  Apage  ÁÑ∂ÂêéÊâìÂºÄ CC  Bpage ÁÑ∂ÂêéÂõûCC Êüêpage  Â¶ÇÊûúÂΩìÂâçÊù•‰∏™Âº∫ÊèêÈÜíËøõÂÖ•CC Â∑•ÂçïËØ¶ÊÉÖ ËøôÈáå‰ºö‰∏¢Â§±ËøûÊé•‰∏äÂèÇÊï∞
        // Âú®Ë∑≥ËΩ¨ÁöÑÊó∂ÂÄôÊãºÊé•ÂèÇÊï∞
        const search = window.location.search || "";
        router.replace(curRouterPath + search);
      }
    });
  }
}

/**
 * Áî®‰∫éËß£ÂÜ≥‰∏ªÂ∫îÁî®ÂíåÂ≠êÂ∫îÁî®ÈÉΩÊòØvue-router4Êó∂Áõ∏‰∫íÂÜ≤Á™ÅÔºåÂØºËá¥ÁÇπÂáªÊµèËßàÂô®ËøîÂõûÊåâÈíÆÔºåË∑ØÁî±ÈîôËØØÁöÑÈóÆÈ¢ò„ÄÇ
 * Áõ∏ÂÖ≥issueÔºöhttps://github.com/micro-zoe/micro-app/issues/155
 * ÂΩìÂâçvue-routerÁâàÊú¨Ôºö4.0.12
 */
function fixBugForVueRouter4(router) {
  const go = router.go.bind(app);
  router.go = function (...arg) {
    console.log("router.go", arg);
    let data = store.getters.getCachesTabs.find((v) => {
      return (
        v.fullPath === window.history.state.current ||
        `/qishi-${config.appCode}${v.fullPath}` === window.history.state.current
      );
    });
    console.log(
      "üöÄ > file: main.js > line 206 > fixBugForVueRouter4 > window.history",
      window.history
    );
    go(...arg);
    if (arg[0] < 0 && config.isChildSystem && window.microApp) {
      console.log(
        "üöÄ > file: main.js > line 210 > fixBugForVueRouter4 > data",
        data
      );
      window.microApp.dispatch({
        event: "removeCachesTabs",
        data: { ...data, ssCode: config.appCode },
      });
      // window.microApp.dispatch({
      //   event: "routerPush",
      //   data: { indexPath: window.history.state.back },
      // });
    }
  };
  // Âà§Êñ≠‰∏ªÂ∫îÁî®ÊòØ vue-router4ÔºåËøôÈáåÊó†ÈúÄÂà§Êñ≠ÔºåÂõ†‰∏∫‰∏ªÂ∫îÁî®‰∏∫ router4
  /**
   * ÈáçË¶ÅËØ¥ÊòéÔºö
   * 1„ÄÅËøôÈáå‰∏ªÂ∫îÁî®‰∏ãÂèëÁöÑÂü∫Á°ÄË∑ØÁî±‰∏∫Ôºö`/main-xxx/app-vue3`ÔºåÂÖ∂‰∏≠ `/main-xxx` ÊòØ‰∏ªÂ∫îÁî®ÁöÑÂü∫Á°ÄË∑ØÁî±ÔºåÈúÄË¶ÅÂéªÊéâÔºåÊàë‰ª¨Âè™Âèñ`/app-vue3`Ôºå‰∏çÂêåÈ°πÁõÆÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥
   *
   * 2„ÄÅrealBaseRoute ÁöÑÂÄº‰∏∫ `/app-vue3`
   */
  // const realBaseRoute = window.__MICRO_APP_BASE_ROUTE__.replace(
  //   /^\/qishi-[^/]+/g,
  //   ""
  // );
  const realBaseRoute = window.__MICRO_APP_BASE_ROUTE__;

  router.beforeEach(() => {
    if (typeof window.history.state?.current === "string") {
      console.log(
        `üöÄ > file: main.js > line 244 > router.beforeEach > ${config.appCode}${window.history.state.current}`,
        window.history
      );
      window.history.state.current = window.history.state.current.replace(
        new RegExp(realBaseRoute, "g"),
        ""
      );
    }
  });

  // router.afterEach(() => {
  //   if (typeof window.history.state === "object") {
  //     window.history.state.current =
  //       realBaseRoute + (window.history.state.current || "");
  //   }
  // });
}

if (window.__MICRO_APP_ENVIRONMENT__) {
  // Object.assign(window, window.rawWindow);

  handleMicroData(router);

  fixBugForVueRouter4(router);

  window.addEventListener("unmount", function () {
    app.unmount();
    log("CC ÂæÆÂ∫îÁî®Âç∏ËΩΩ");
  });
}

function log(name, ...arg) {
  console.log(`%c[${name}]`, "color: red; font-style: italic", "\n", ...arg);
}
